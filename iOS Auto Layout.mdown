---
title: iOS-Auto Layout
notebook: iOS
tags:
---
#Auto Layout
[TOC]
*整理自 Apple 官方文档 [Auto Layout](https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1)*
## 理解Auto Layout
Auto Layout动态地计算视图层中所有视图的大小和位置，基于设置在这些视图上的约束。例如，你能约束一个button使得其水平居中于一个Image视图，并且使得button的上边缘距离Image视图的下边缘8个像素点。如果Image视图大小和位置改变了，button视图的位置自动调整以匹配之前的约束。
基于约束的方法可以对内部和外部的改变做出动态调整。
### 外部改变 
外部改变通常在父视图的大小或者形状发生改变的时候发生。一些常见的外部改变:

+ 用户调整窗口的大小（OS X）
+ 用户使用iPad进入或离开Split View（iOS）
+ 设备旋转（iOS）
+ 活动的电话或者录音栏显示或者消失（iOS）
+ 支持不同大小的种类
+ 支持不同大小的屏幕

### 内部改变
内部改变通常在用户界面的视图或者控制大小改变时发生。常见的内部改变：

- 由于应用改变内容显示
- 应用支持国际化
- 应用支持动态类型（iOS）

当应用内容改变时，新的内容可能需要不同的布局，最常见的就是应用中显示文本和图像。
国际化对布局有三个影响。首先，不同的语言，对于label占用不同大小的空间。第二，不同地区的日期和数字有着不同的格式，这些对布局也有轻微的影响。第三，改变语言不仅影响文本的大小，还对布局的结构有影响，不同的语言使用不同的布局方向。
最后，如果你的应用支持动态类型，例如用户可以在使用时改变字体大小。这些能改变用户界面中任何和文本相关的控件的宽度和高度，如果用户改变字体大小发生在应用正在运行时，这时候字体和布局就必需做相应的调整。

### Auto Layout 对比 Frame-based Layout
布局用户界面通常有三种方法：
+ 每个视图都通过代码设置
+ 使用 autoresizing mask 自动响应外部的改变
+ 使用 Auto Layout

传统的布局方法，都是通过代码设置视图层中每个视图的 origin，width 以及 height。为了布局UI，你需要计算每个视图的大小和位置，并且一旦发生改变，你必须重新计算那些受影响的 frame。一般来说，通过代码设置视图能够更加灵活。当发生一个改变时，你能够直接改变任何一个你想改变的视图。然而，你需要管理所有的可能的改变，这使得 UI 布局设计，调试以及维护变得十分困难。
通过使用 autoresizing masks 可以减少传统代码布局的工作量。 autoresizing masks 定义了当一个父视图的 frame 发生改变时，子视图的 frame 该如何调整。但是 autoresizing masks 仅仅支持外部改变，不支持内部改变。
Auto Layout 通过一系列的约束定义用户界面。约束代表两个视图之间的关系。Auto Layout 通过这些约束计算每个视图的位置和大小。这能够同时响应内部改变和内部改变。